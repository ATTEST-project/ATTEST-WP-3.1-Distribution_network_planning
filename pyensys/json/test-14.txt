    def test14(self):
        '''
        Set case with RES
        '''
        print('14: test_pyene_RES')
        conf = testConfig()
        conf.NM.settings['File'] = os.path.join(json_directory(), 'caseGhana_Sim40_BSec_ManualV02.json')
        conf.EM.settings['File'] = os.path.join(json_directory(),
                                                'ResolutionTreeMonth01.json')
        conf.NM.settings['Flag'] = False
        conf.NM.settings['NoTime'] = 24
        conf.NM.scenarios['Weights'] = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]

        # Conventional generators
        conf.NM.conventional['Number'] = 15  # Number of conventional generators
        conf.NM.conventional['Bus'] = [55, 2, 3, 8, 55, 3, 55, 18, 55, 55, 55, 55, 55, 55,
                                       34]  # Location (bus) of conventional generators
        conf.NM.conventional['Max'] = [220, 946, 120.8, 880, 289.6, 320, 360, 350, 245.5, 360, 490, 110, 276, 276,
                                       155]  # Generation capacity
        conf.NM.conventional['Cost'] = [0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01,
                                        0.01, 0.01]  # Costs

        # RES generators
        conf.NM.RES['Number'] = 2  # Number of RES generators
        conf.NM.RES['Bus'] = [1, 4]  # Location (bus) of generators
        conf.NM.RES['Max'] = [10, 15]  # Generation capacity
        #conf.NM.RES['Max'] = [946, 120.8]  # Generation capacity
        conf.NM.RES['Cost'] = [0.0001, 0.0001]  # Costs



        # Create object
        EN = pe(conf.EN)
        # Initialise with selected configuration
        EN.initialise(conf)

        fileName = os.path.join(json_directory(), 'TimeSeries.json')
        Eprofiles = json.load(open(fileName))
        EN.set_Demand(1, Eprofiles['Demand']['Values'][0])  # First scenario demand profile - Winter Weekday
        if conf.NM.scenarios['NoDem'] == 2:
            EN.set_Demand(2, Eprofiles['Demand']['Values'][1])  # Second scenario demand profile - Winter Weekend



        # RES profile
        resInNode = _node()
        for xr in range(conf.NM.RES['Number']):
            resInNode.value = Eprofiles['PV']['Values'][xr]  # Winter profile for RES generator 1 & 2
            resInNode.index = xr + 1
            EN.set_RES(resInNode.index, resInNode.value)


        m = ConcreteModel()
        m = EN.run(m)
        EN.Print_ENSim(m)


        EN.Print_ENSim(m)
        print('Total curtailment:', EN.get_AllDemandCurtailment(m))
        print('Spill ', EN.get_AllRES(m))
        print('OF   : ', m.OF.expr())